<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } global $wpdb, $current_user; $data = array(); $message = ''; $message_class = 'wpc_error'; extract($_REQUEST); if ( isset( $wpc_submit_profile ) && current_user_can( 'wpc_modify_profile' ) ) { if ( !isset( $_REQUEST['user_data']['email'] ) ) $message .= __( 'The email is required.<br/>', WPC_CLIENT_TEXT_DOMAIN ); $user_email = apply_filters( 'pre_user_email', isset( $_REQUEST['user_data']['email'] ) ? $_REQUEST['user_data']['email'] : '' ); if ( email_exists( $user_email ) ) { if ( get_current_user_id() != get_user_by( 'email', $user_email )->ID ) { $message .= __( 'Sorry, email address already in use!<br/>', WPC_CLIENT_TEXT_DOMAIN ); } } if ( !empty( $_REQUEST['user_data']['pass1'] ) && !empty( $_REQUEST['user_data']['pass2'] ) && $_REQUEST['user_data']['pass1'] != $_REQUEST['user_data']['pass2'] ) { $message .= __("Sorry, Passwords are not matched!<br/>", WPC_CLIENT_TEXT_DOMAIN); } $all_custom_fields = $this->get_custom_fields( 'user_edit', get_current_user_id(), false, 'staff' ); if( isset( $custom_fields ) && count( $custom_fields ) > count( $all_custom_fields ) ) { exit; } elseif( !( isset( $custom_fields ) && count( $custom_fields ) ) ) { $custom_fields = array(); } if( isset( $_FILES['custom_fields'] ) ) { $files_custom_fields = array(); foreach( $_FILES['custom_fields'] as $key1 => $value1 ) foreach( $value1 as $key2 => $value2 ) $files_custom_fields[$key2][$key1] = $value2; $custom_fields = array_merge( $custom_fields, $files_custom_fields ); } if( isset( $custom_fields ) && is_array( $custom_fields ) && is_array( $all_custom_fields ) ) { foreach( $custom_fields as $key=>$value ) { if( !array_key_exists( $key, $all_custom_fields ) ) { exit; } } foreach( $all_custom_fields as $all_key=>$all_value ) { if ( ( 'checkbox' == $all_value['type'] || 'radio' == $all_value['type'] || 'multiselectbox' == $all_value['type'] ) && !array_key_exists( $all_key, $custom_fields ) ) { $custom_fields[$all_key] = ''; } foreach( $custom_fields as $key=>$value ) { if ( 'file' == $all_value['type'] ) { if ( $key == $all_key && isset( $all_value['required'] ) && '1' == $all_value['required'] && '' == $value['name'] ) { $message .= sprintf( __( "%s is required.<br/>", WPC_CLIENT_TEXT_DOMAIN), $all_custom_fields[$all_key]['title']); } } else { if ( $key == $all_key && isset( $all_value['required'] ) && '1' == $all_value['required'] && '' == $value ) { $message .= sprintf( __( "%s is required.<br/>", WPC_CLIENT_TEXT_DOMAIN), $all_custom_fields[$all_key]['title']); } } } } } if( '' == $message ) { $message = __( "The changes have been successfully saved.<br/>", WPC_CLIENT_TEXT_DOMAIN ); $message_class = 'wpc_apply'; } else { $message_class = 'wpc_error'; } } if ( isset( $_REQUEST['user_data'] ) ) { $user_data = $_REQUEST['user_data']; } else { $staff = get_userdata( $current_user->ID ); $user_data['email'] = $staff->user_email; $user_data['first_name'] = get_user_meta( $current_user->ID, 'first_name', true ); $user_data['last_name'] = get_user_meta( $current_user->ID, 'last_name', true ); } $data['modify_profile'] = false; if ( current_user_can( 'wpc_modify_profile' ) ) { $data['modify_profile'] = true; $data['reset_password'] = false; if ( current_user_can( 'wpc_reset_password' ) ) { $data['reset_password'] = true; $data['label_contact_password'] = __( 'New Password', WPC_CLIENT_TEXT_DOMAIN ) ; $data['contact_password'] = ( $message ) ? esc_html( $_REQUEST['contact_password'] ) : ''; $data['label_contact_password2'] = __( 'Confirm New Password', WPC_CLIENT_TEXT_DOMAIN ) ; $data['contact_password2'] = ( $message ) ? esc_html( $_REQUEST['contact_password2'] ) : ''; $data['label_strength_indicator'] = __( 'Strength indicator', WPC_CLIENT_TEXT_DOMAIN ) ; $data['label_indicator_hint'] = __( '<strong>Hint:</strong> The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like <strong>! " ? $ % ^ & )</strong>.', WPC_CLIENT_TEXT_DOMAIN ) ; } $data['text_submit'] = __( 'Update', WPC_CLIENT_TEXT_DOMAIN ) ; $data['nonce'] = wp_nonce_field( 'verify_edit_user', 'edit_nonce_field', true, false ); } $data['custom_fields'] = $this->get_custom_fields( 'user_edit', $current_user->ID, false, 'staff' ); $data['label_avatar'] = __( 'Avatar', WPC_CLIENT_TEXT_DOMAIN ); $data['title_star'] = __( 'This field is required', WPC_CLIENT_TEXT_DOMAIN ); $data['label_staff_login'] = __( 'Login', WPC_CLIENT_TEXT_DOMAIN ); $data['label_staff_email'] = __( 'Email', WPC_CLIENT_TEXT_DOMAIN ); $data['label_first_name'] = __( 'First Name', WPC_CLIENT_TEXT_DOMAIN ); $data['label_last_name'] = __( 'Last Name', WPC_CLIENT_TEXT_DOMAIN ); $data['login_cannot_changed'] = __( 'Login cannot be changed.', WPC_CLIENT_TEXT_DOMAIN ); $data['message_class'] = ( 'red' == $message_class ) ? 'message_red' : 'message_green'; $data['message'] = $message; $data['label_is_required'] = __( ' is required', WPC_CLIENT_TEXT_DOMAIN ); $data['label_invalid_email'] = __( 'Invalid Email, proper format "name@something.com"', WPC_CLIENT_TEXT_DOMAIN ); $avatar = get_user_meta( $current_user->ID, 'wpc_avatar', true ); $data['avatar_field'] = $this->build_avatar_field( 'avatar', $avatar, $current_user->ID ); $data['staff_login'] = $current_user->user_login; $data['staff_email'] = ( $user_data['email'] ) ? esc_html( $user_data['email'] ) : ''; $data['first_name'] = ( $user_data['first_name'] ) ? esc_html( $user_data['first_name'] ) : ''; $data['last_name'] = ( $user_data['last_name'] ) ? esc_html( $user_data['last_name'] ) : ''; $html = ''; $data['custom_html'] = apply_filters( 'wpc_client_staff_profile_custom_html', $html ); $out2 = $this->cc_getTemplateContent( 'wpc_profile_staff', $data, $user_id ); return $this->cc_replace_placeholders( do_shortcode( $out2 ), array( 'client_id' => $user_id ) );