<?php
if ( ! defined( 'ABSPATH' ) ) { exit; } $wpc_clients_staff = $this->cc_get_settings( 'clients_staff' ); if ( !isset( $wpc_clients_staff['client_registration'] ) || 'yes' != $wpc_clients_staff['client_registration'] ) { return __( 'Registration is disabled!', WPC_CLIENT_TEXT_DOMAIN ); } if( !$no_redirect ) { global $wpc_client, $wpc_captcha; do_action( 'wpc_client_page_client_registration_form' ); $data['show_avatar'] = false; if( isset( $wpc_clients_staff['avatar_on_registration'] ) && 'yes' == $wpc_clients_staff['avatar_on_registration'] ) { $data['show_avatar'] = true; $data['avatar'] = $this->build_avatar_field( 'avatar' ); $data['labels']['avatar'] = __( 'Avatar', WPC_CLIENT_TEXT_DOMAIN ); } if( isset( $wpc_clients_staff['using_captcha'] ) && 'yes' == $wpc_clients_staff['using_captcha'] && isset( $wpc_clients_staff['registration_form_using_captcha'] ) && 'yes' == $wpc_clients_staff['registration_form_using_captcha'] ) { if ( isset( $wpc_clients_staff['captcha_version'] ) && 'recaptcha_2' == $wpc_clients_staff['captcha_version'] ) { if( !empty( $wpc_clients_staff['captcha_publickey_2'] ) && !empty( $wpc_clients_staff['captcha_privatekey_2'] ) ) { $publickey = $wpc_clients_staff['captcha_publickey_2']; $privatekey = $wpc_clients_staff['captcha_privatekey_2']; $theme = $wpc_clients_staff['captcha_theme']; } else { return; } if ( !class_exists( 'ReCaptcha' ) ) include_once $this->plugin_dir . '/includes/libs/recaptchalib_2.php'; $field_id = uniqid('wpc_recaptcha_'); $data['labels']['captcha'] = '<div style="transform:scale(0.77);transform-origin:0 0" id="' . $field_id . '"></div>'; $wpc_captcha .= "grecaptcha.render('{$field_id}', {
                'sitekey' : '{$publickey}',
                'theme'   : '{$theme}'
            });\n"; $captcha_version = 'recaptcha_2'; } else { if( isset( $wpc_clients_staff['captcha_publickey'] ) && isset( $wpc_clients_staff['captcha_privatekey'] ) && '' != $wpc_clients_staff['captcha_publickey'] && '' != $wpc_clients_staff['captcha_privatekey'] ) { $publickey = $wpc_clients_staff['captcha_publickey']; $privatekey = $wpc_clients_staff['captcha_privatekey']; } else { $publickey = "6LepaeMSAAAAAJppWl-CnHrjUntX25aXSmM1gqbx"; $privatekey = '6LepaeMSAAAAAO2oP2rq-CZ_e8kwZRgJ6i69v0Gd'; } $captcha_version = 'recaptcha'; $theme_name = ( isset( $wpc_clients_staff['captcha_theme'] ) && !empty( $wpc_clients_staff['captcha_theme'] ) ) ? $wpc_clients_staff['captcha_theme'] : 'red'; ?>
            <script type="text/javascript">
                var theme_name = '<?php echo $theme_name ?>';
                var RecaptchaOptions = {
                    theme : theme_name
                };
            </script>

            <?php if ( !function_exists( '_recaptcha_qsencode' ) ) include $this->plugin_dir . '/includes/libs/recaptchalib.php'; $ssl = false; if( is_ssl() ) { $ssl = true; } $data['labels']['captcha'] = recaptcha_get_html( $publickey, null, $ssl ); } } $data['terms_used'] = false; if( isset( $wpc_clients_staff['using_terms'] ) && 'yes' == $wpc_clients_staff['using_terms'] && isset( $wpc_clients_staff['using_terms_form'] ) && in_array( 'registration', $wpc_clients_staff['using_terms_form'] ) ) { $data['terms_used'] = true; $data['vals']['terms_default_checked'] = ( isset( $wpc_clients_staff['terms_default_checked'] ) && 'yes' == $wpc_clients_staff['terms_default_checked'] ) ? ' checked="checked"' : ''; $data['vals']['terms_hyperlink'] = ( isset( $wpc_clients_staff['terms_hyperlink'] ) && !empty( $wpc_clients_staff['terms_hyperlink'] ) ) ? $wpc_clients_staff['terms_hyperlink'] : '#'; $data['labels']['terms_agree'] = ( !empty( $wpc_clients_staff['terms_text'] ) ) ? $wpc_clients_staff['terms_text'] : __( 'I agree.', WPC_CLIENT_TEXT_DOMAIN); } $filtered_request = apply_filters( 'wpc_client_before_registration_form_submit', $_REQUEST ); extract($filtered_request); $error = ""; if( isset( $wpc_submit_registration ) ) { if ( empty( $contact_name ) ) $error .= __('The Contact Name is required.<br/>', WPC_CLIENT_TEXT_DOMAIN); if ( empty( $contact_username ) ) $error .= __('The Username is required.<br/>', WPC_CLIENT_TEXT_DOMAIN); if ( empty( $contact_email ) ) $error .= __('The Email is required.<br/>', WPC_CLIENT_TEXT_DOMAIN); if ( username_exists( $contact_username ) ) $error .= __('Sorry, that username already exists!<br/>', WPC_CLIENT_TEXT_DOMAIN); $contact_email = apply_filters( 'pre_user_email', isset( $contact_email ) ? $contact_email : '' ); if ( email_exists( $contact_email ) ) $error .= __('Sorry, email address already in use!<br/>', WPC_CLIENT_TEXT_DOMAIN); if ( empty( $contact_password ) || empty( $contact_password2 ) ) { if ( empty( $contact_password ) ) $error .= __("Password is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); elseif ( empty( $contact_password2 ) ) $error .= __("Confirm password is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); elseif ( $contact_password != $contact_password2 ) $error .= __("Sorry, Passwords are not matched! .<br/>", WPC_CLIENT_TEXT_DOMAIN); } $all_custom_fields = $this->get_custom_fields( 'user_add' ); if( isset( $custom_fields ) && count( $custom_fields ) > count( $all_custom_fields ) ) { exit; } if( !isset( $custom_fields ) ) { $custom_fields = array(); } if( isset( $_FILES['custom_fields'] ) ) { $files_custom_fields = array(); foreach( $_FILES['custom_fields'] as $key1 => $value1) foreach( $value1 as $key2 => $value2 ) $files_custom_fields[$key2][$key1] = $value2; $custom_fields = array_merge($custom_fields, $files_custom_fields ); } if( isset( $all_custom_fields ) && is_array( $all_custom_fields ) && 0 < count( $all_custom_fields ) ) { if( isset( $custom_fields ) && is_array( $custom_fields ) && 0 < count( $custom_fields ) ) { foreach( $custom_fields as $key=>$value ) { if( !array_key_exists( $key, $all_custom_fields ) ) { exit; } } } if( isset( $custom_fields ) && is_array( $custom_fields ) && is_array( $all_custom_fields ) ) { foreach( $all_custom_fields as $all_key=>$all_value ) { if ( ( 'checkbox' == $all_value['type'] || 'radio' == $all_value['type'] || 'multiselectbox' == $all_value['type'] ) && !array_key_exists( $all_key, $custom_fields ) ) { $custom_fields[$all_key] = ''; } foreach( $custom_fields as $key=>$value ) { if ( 'file' == $all_value['type'] ) { if ( $key == $all_key && isset( $all_value['required'] ) && '1' == $all_value['required'] && '' == $value['name'] ) { $error .= sprintf( __( "%s is required.<br/>", WPC_CLIENT_TEXT_DOMAIN), $all_custom_fields[$all_key]['title']); } } else { if ( $key == $all_key && isset( $all_value['required'] ) && '1' == $all_value['required'] && '' == $value ) { $error .= sprintf( __( "%s is required.<br/>", WPC_CLIENT_TEXT_DOMAIN), $all_custom_fields[$all_key]['title']); } } } } } } if ( isset( $captcha_version ) ) { if ( 'recaptcha' == $captcha_version ) { if ( isset( $recaptcha_response_field ) && !empty( $recaptcha_response_field ) ) { $resp = recaptcha_check_answer ( $privatekey, $_SERVER["REMOTE_ADDR"], $_POST["recaptcha_challenge_field"], $_POST["recaptcha_response_field"] ); if ( !$resp->is_valid ) { $error .= __("Sorry, incorrect Captcha! <br />", WPC_CLIENT_TEXT_DOMAIN); } } else { $error .= __("Captcha is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); } } else { $resp = null; $reCaptcha = new ReCaptcha($privatekey); if (isset($_POST["g-recaptcha-response"])) { $resp = $reCaptcha->verifyResponse( $_SERVER["REMOTE_ADDR"], $_POST["g-recaptcha-response"] ); } if ($resp == null || !$resp->success) { $error .= __("Captcha is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); } } } if( isset( $wpc_clients_staff['using_terms'] ) && 'yes' == $wpc_clients_staff['using_terms'] && isset( $wpc_clients_staff['using_terms_form'] ) && in_array( 'registration', $wpc_clients_staff['using_terms_form'] ) ) { if( empty( $terms_agree ) ) { $error .= ( isset( $wpc_clients_staff['terms_notice'] ) && !empty( $wpc_clients_staff['terms_notice'] ) ) ? $wpc_clients_staff['terms_notice'] : __( 'Sorry, you must agree to the Terms/Conditions to continue!', WPC_CLIENT_TEXT_DOMAIN ); } } $error = apply_filters( 'wpc_client_registration_form_validation', $error ); if ( empty( $error ) ) { $userdata = array( 'user_pass' => $this->prepare_password( $contact_password2 ), 'user_login' => esc_attr( $contact_username ), 'display_name' => esc_attr( trim( $contact_name ) ), 'user_email' => $contact_email, 'role' => 'wpc_client', 'business_name' => ( isset( $business_name ) ) ? esc_attr( trim( $business_name ) ) : esc_attr( trim( $contact_name ) ), 'contact_phone' => esc_attr( $contact_phone ), 'send_password' => ( isset( $_REQUEST['user_data']['send_password'] ) ) ? esc_attr( $_REQUEST['user_data']['send_password'] ) : '', 'self_registered' => ( isset( $wpc_self_registered ) && 1 == $wpc_self_registered ) ? 1 : 0, 'avatar' => ( isset( $avatar ) && !empty( $avatar ) ) ? $avatar : '', ); if ( isset( $wpc_clients_staff['auto_client_approve'] ) && 'yes' == $wpc_clients_staff['auto_client_approve'] ) { $userdata['to_approve'] = 'auto'; } else { $userdata['to_approve'] = '1'; } $userdata['custom_fields'] = array(); if ( isset( $custom_fields ) ) $userdata['custom_fields'] = $custom_fields; $user_id = $this->cc_client_update_func( $userdata ); do_action( 'wp_client_redirect', $this->cc_get_slug( 'successful_client_registration_page_id' ) ); exit; } } $data['error'] = $error; $data['required_text'] = __( ' <span style="color:red;" title="This field is marked as required by the administrator.">*</span>', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['business_name'] = __( 'Business or Client Name', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_name'] = __( 'Contact Name', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_email'] = __( 'Email', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_phone'] = __( 'Phone', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_username'] = __( 'Username', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_password'] = __( 'Password', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['contact_password2'] = __( 'Confirm Password', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['password_indicator'] = __( 'Strength indicator', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['password_hint'] = __( '>> <strong>HINT:</strong> The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like <strong>! " ? $ % ^ & )</strong>.', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['send_password'] = __( 'Send this password to email?', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['send_password_desc'] = __( 'Check to Enable', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['send_button'] = __( 'Submit Registration', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['terms_conditions'] = __( 'Terms/Conditions', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['is_required'] = __( ' is required', WPC_CLIENT_TEXT_DOMAIN ); $data['labels']['invalid_email'] = __( 'Invalid Email, proper format "name@something.com"', WPC_CLIENT_TEXT_DOMAIN ); $data['vals']['business_name'] = isset( $_REQUEST['business_name'] ) ? esc_html( $_REQUEST['business_name'] ) : ''; $data['vals']['contact_name'] = isset( $_REQUEST['contact_name'] ) ? esc_html( $_REQUEST['contact_name'] ) : ''; $data['vals']['contact_email'] = isset( $_REQUEST['contact_email'] ) ? esc_html( $_REQUEST['contact_email'] ) : ''; $data['vals']['contact_phone'] = isset( $_REQUEST['contact_phone'] ) ? esc_html( $_REQUEST['contact_phone'] ) : ''; $data['vals']['contact_username'] = isset( $_REQUEST['contact_username'] ) ? esc_html( $_REQUEST['contact_username'] ) : ''; $data['vals']['send_password'] = isset( $_REQUEST['send_password'] ) ? esc_html( $_REQUEST['send_password'] ) : ''; $data['custom_fields'] = $this->get_custom_fields( 'user_add' ); $html = ''; $data['custom_html'] = apply_filters( 'wpc_client_registration_form_custom_html', $html ); $out2 = $this->cc_getTemplateContent( 'wpc_client_registration_form', $data ); return $this->cc_replace_placeholders( do_shortcode( $out2 ) ); } else { return ( isset( $atts['no_redirect_text'] ) && !empty( $atts['no_redirect_text'] ) ) ? $atts['no_redirect_text'] : sprintf( __( '<p>%s already registered.</p>', WPC_CLIENT_TEXT_DOMAIN ), $this->custom_titles['client']['s'] ); }